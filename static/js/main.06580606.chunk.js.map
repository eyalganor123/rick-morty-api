{"version":3,"sources":["components/CharList.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["CharList","id","chars","handleclick","isclicked","className","onClick","src","image","alt","gender","species","status","origin","name","map","char","i","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","characters","isClicked","key","title","fetch","then","response","json","users","results","console","log","length","e","target","dataset","innerText","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+PAIe,SAASA,EAAT,GAA0D,IAAtCC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,YAC5C,OADsE,EAAbC,UAGrD,sBAAKC,UAAU,oBAAoBC,QAASH,EAA5C,UACE,qBAAKE,UAAU,GAAGE,IAAKL,EAAMD,EAAK,GAAGO,MAAOC,IAAI,SAChD,uBAAMJ,UAAU,eAAhB,UACE,sBAAKA,UAAU,cAAf,qBAAsCH,EAAMD,EAAK,GAAGS,UACpD,sBAAKL,UAAU,eAAf,sBAAwCH,EAAMD,EAAK,GAAGU,WACtD,sBAAKN,UAAU,cAAf,qBAAsCH,EAAMD,EAAK,GAAGW,UACpD,sBAAKP,UAAU,eAAf,qBAAuCH,EAAMD,EAAK,GAAGY,OAAOC,cAMhE,qBAAKT,UAAU,+CAAf,SACGH,EAAMa,KAAI,SAACC,EAAMC,GAAP,OACT,8BACE,qBAAK,UAASD,EAAKf,GAAII,UAAU,OAAOC,QAASH,EAAjD,SAA+Da,EAAKF,QAD5DE,EAAKf,S,UCnBJiB,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAU,GAJK,E,qDAQrB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAGzB,WACE,OAAIG,KAAKJ,MAAMC,SAEX,6DAGGG,KAAKL,MAAMO,a,GAnBoBC,aCwD3BC,E,kDApDb,aAAe,IAAD,8BACZ,gBACKR,MAAQ,CACXS,WAAY,GACZC,WAAW,EACXC,IAAK,EACLC,MAAO,gBANG,E,qDAUd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAAEI,WAAYQ,EAAMC,UAAYC,QAAQC,IAAIH,EAAMC,c,oBAKtE,WAAU,IAAD,OAkBDpC,EAAQsB,KAAKJ,MAAMS,WACzB,OAAoC,GAAhCL,KAAKJ,MAAMS,WAAWY,OAAoB,yCAG1C,sBAAKpC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,SAAoBmB,KAAKJ,MAAMY,QAC/B,cAAC,EAAD,UACE,cAAC,EAAD,CAAU/B,GAAIuB,KAAKJ,MAAMW,IAAK7B,MAAOA,EAAOC,YAvBhC,SAACuC,GACnB,IAAMzC,EAAMyC,EAAEC,OAAOC,QAAQ3C,GACvB+B,EAAQU,EAAEC,OAAOE,UAEvB,EAAKpB,SAAS,CAAEM,IAAK9B,IACrB,EAAKwB,SAAS,CAAEO,MAAOA,IAEvB,IAAIF,EAAY,EAAKV,MAAMU,UAC3B,EAAKL,SAAS,CAAEK,WAAYA,IACxBA,EACF,EAAKL,SAAS,CAAEO,MAAO,iBAEvBO,QAAQC,IAAI,EAAKpB,MAAMS,aAWmDzB,UAAWoB,KAAKJ,MAAMU,qB,GA7CtFH,aCKZmB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvC,QACfkC,UAAUC,cAAcO,WAK1BvB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBuB,OAAM,SAAAzC,GACLiB,QAAQjB,MAAM,4CAA6CA,M,MC/DjE0C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,kBAAwBrB,OAAOC,UAC3CpC,SAAWmC,OAAOC,SAASpC,OAIvC,OAGFmC,OAAOsB,iBAAiB,QAAQ,WAC9B,IAAMjB,EAAK,UAAMgB,kBAAN,sBAEPvB,EAwCV,SAAiCO,GAE/BpB,MAAMoB,GACHnB,MAAK,SAAAC,GAGkB,MAApBA,EAASvB,SACuD,IAAhEuB,EAASoC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CnB,UAAUC,cAAcmB,MAAMxC,MAAK,SAAAuB,GACjCA,EAAakB,aAAazC,MAAK,WAC7Bc,OAAOC,SAAS2B,eAKpBxB,EAAgBC,MAGnBU,OAAM,WACLxB,QAAQC,IACN,oEA5DAqC,CAAwBxB,GAGxBD,EAAgBC,OC/BxByB,K","file":"static/js/main.06580606.chunk.js","sourcesContent":["import React from 'react'\nimport '../CharList.css'\n\n\nexport default function CharList({ id, chars, handleclick, isclicked }) {\n  if (isclicked) {\n    return (\n      <div className=\"  text-container \" onClick={handleclick}>\n        <img className=\"\" src={chars[id - 1].image} alt=\"dude\"  />\n        <span className=\"align-start \">\n          <div className=\" green text\">gender: {chars[id - 1].gender}</div>\n          <div className=\" orange text\">species: {chars[id - 1].species}</div>\n          <div className=\" green text\">status: {chars[id - 1].status}</div>\n          <div className=\" orange text\">planet: {chars[id - 1].origin.name}</div>\n        </span>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"flex flex-column align-center justify-center\">\n        {chars.map((char, i) => (\n          <div key={char.id}>\n            <div data-id={char.id} className=\"name\" onClick={handleclick}>{char.name}</div>\n          </div>\n        ))}\n      </div>\n    )\n\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      hasError: false\n    }\n  }\n\ncomponentDidCatch(error, info){\n  this.setState({hasError: true})\n}\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <h1>oops...This shouldnt happen</h1>\n      )\n    }\n    return this.props.children\n  }\n}\n","import React, { Component, useRef } from 'react';\nimport CharList from '../components/CharList';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      characters: [],\n      isClicked: false,\n      key: 0,\n      title: \"Rick & Morty\"\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://rickandmortyapi.com/api/character/\")\n      .then(response => response.json())\n      .then(users => {\n        this.setState({ characters: users.results });(console.log(users.results))\n\n      })\n  }\n\n  render() {\n\n    const handleclick = (e) => {\n      const id = (e.target.dataset.id);\n      const title = e.target.innerText\n\n      this.setState({ key: id });\n      this.setState({ title: title })\n\n      let isClicked = this.state.isClicked;\n      this.setState({ isClicked: !isClicked });\n      if (isClicked) {\n        this.setState({ title: \"Rick & Morty\" })\n      } else {\n        console.log(this.state.characters);\n      }\n    }\n\n    const chars = this.state.characters\n    if (this.state.characters.length == 0) return <h1>wait...</h1>\n    else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">{this.state.title}</h1>\n          <ErrorBoundry>\n            <CharList id={this.state.key} chars={chars} handleclick={handleclick} isclicked={this.state.isClicked} />\n          </ErrorBoundry>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons'; \n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}